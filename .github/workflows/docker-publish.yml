name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      # - master
      - run/*

    # Publish `v1.2.3` tags as releases.
    # tags:
    #   - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: mastodon

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v1

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi
  # # Push image to GitHub Package Registry.
  # # See also https://docs.docker.com/docker-hub/builds/
  push:
    # # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v1

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull base image
        continue-on-error: true
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          docker pull $IMAGE_ID:build_dep

      - name: Build deps image
        run: docker build . --file Dockerfile --target build-dep --tag dep-image

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          # 
          [ "$VERSION" == "nyan" ] && VERSION="latest-nyan"
          [ "$VERSION" == "mdn-hinanet" ] && VERSION="latest-mdn_hinanet"
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          echo VERSION=build_dep
          docker tag dep-image $IMAGE_ID:build_dep
          docker push $IMAGE_ID:build_dep
